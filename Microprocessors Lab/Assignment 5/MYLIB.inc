
    ;PUBLIC GET_NUMBER
GET_NUMBER PROC NEAR   
    
GET_NUMBER_0:    
    READ_KEY
    
GET_NUMBER_1:
    CMP AL,51H
    JE EXIT_PROG
    CMP AL,71H
    JE EXIT_PROG 
    CMP AL,2BH
    JE PLUS_OR_MINUS
    CMP AL,2DH
    JE PLUS_OR_MINUS
    CMP AL,3DH
    JE EQUAL
    CMP CL,5
    JE GET_NUMBER_0
    CMP AL,39H
    JG GET_NUMBER_0
    CMP AL,30H
    JL GET_NUMBER_0 
    PRINT_CHAR AL
    SUB AL,30H
    MOV [BX],AL
    INC BX
    INC CL
    JMP GET_NUMBER_0
    
 
PLUS_OR_MINUS:
    CMP CL,0
    JE GET_NUMBER_0
    CMP CH,0
    JNE GET_NUMBER_0
    PRINT_CHAR AL
    MOV BX,OFFSET SIGN
    MOV [BX],AL
    MOV CH,AL
    RET 

EQUAL:
    CMP CL,0
    JE GET_NUMBER_0
    CMP CH,1
    JNE GET_NUMBER_0
    PRINT_CHAR AL
    RET
    
EXIT_PROG:
    EXIT_PROGRAM 
    
GET_NUMBER ENDP 



MAKE_NUMBER PROC NEAR 
    
MAKE_NUMBER_0:    
    PUSH AX
    PUSH BX
    PUSH DX
    MOV AX,1  

MAKE_NUMBER_1:
    MOV BX,10
    CMP CL,0
    JE MAKE_NUMBER_2
    MUL BX
    DEC CL 
    JMP MAKE_NUMBER_1
    
MAKE_NUMBER_2:
    POP DX
    MOV BX,OFFSET DX_TEMP
    MOV [BX],DX
    POP BX
    PUSH CX 
    MOV CL,[BX]
    MOV CH,0
    MUL CX
    POP CX
    PUSH BX
    MOV BX,OFFSET DX_TEMP
    ADD DX,[BX]
    MOV BX,OFFSET TEMP
    MOV [BX],CX
    POP BX
    MOV CX,AX
    POP AX
    CALL ADD_WITH_OVERFLOW
    PUSH BX
    MOV BX,OFFSET TEMP
    MOV CX,[BX]
    POP BX
    DEC CH
    MOV CL,CH
    INC BX
    CMP CH,11111111B
    JE MAKE_NUMBER_EXIT
    JMP MAKE_NUMBER_0
    
    MAKE_NUMBER_EXIT:        
    RET


ADD_WITH_OVERFLOW PROC NEAR
    ;DXAX IS OUR NUMBER
    PUSH BX
    MOV BX,0xFFFF
    SUB BX,AX
    CMP BX,CX
    JB OVERFLOW
    ADD AX,CX
    JMP ADD_WITH_OVERFLOW_END
    
OVERFLOW:
    INC DX
    MOV AX,0
    SUB CX,BX
    MOV AX,CX
    DEC AX
    JMP ADD_WITH_OVERFLOW_END
    
ADD_WITH_OVERFLOW_END:
    POP BX
    RET
    
ADD_WITH_OVERFLOW ENDP 

ADD_OR_SUB PROC NEAR
    PUSH BX
    PUSH CX
    MOV BX,OFFSET SIGN
    MOV CL,[BX]
    CMP CL,2BH
    JE PLUS
    CMP CL,2DH
    JE MINUS
    
PLUS:
    POP CX
    POP BX
    ADD DX,BX
    CALL ADD_WITH_OVERFLOW
    RET
    
MINUS:
    POP CX
    POP BX
    CALL FIND_BIGGER 
    RET
    
ADD_OR_SUB ENDP 

MAKE_HEX PROC NEAR
    PUSH AX
    PUSH DX
    MOV CX,0

LOOP1:
    MOV BX,16
    DIV BX
    PUSH DX
    INC CX
    MOV DX,0  
    CMP AX,15
    JG LOOP1
    
    CALL PRINT_HEX
    
LOOP2:
    CMP CX,0
    JE MAKE_HEX_END
    POP AX
    CALL PRINT_HEX
    DEC CX
    JMP LOOP2
    
MAKE_HEX_END:
    POP DX
    POP AX
    RET

MAKE_HEX ENDP  
    
PRINT_HEX PROC NEAR
    
    CMP AL,9
    JG CHAR_IS_LETTER
    ADD AL,30H
    PRINT_CHAR AL
    RET
    
CHAR_IS_LETTER:
    SUB AL,10
    ADD AL,41H
    PRINT_CHAR AL
    RET
    
PRINT_HEX ENDP  

MAKE_DEC PROC NEAR  
    PUSH AX
    PUSH DX
    MOV CX,0

LOOP1_DEC:
    MOV BX,10
    DIV BX
    PUSH DX
    INC CX
    MOV DX,0  
    CMP AX,9
    JG LOOP1_DEC
    
    ADD AL,30H
    PRINT_CHAR AL
    
LOOP2_DEC:
    CMP CX,0
    JE MAKE_HEX_END
    POP AX
    ADD AL,30H
    PRINT_CHAR AL
    DEC CX
    JMP LOOP2_DEC
    
MAKE_DEC_END:
    POP DX
    POP AX
    RET

MAKE_DEC ENDP  
    
FIND_BIGGER PROC NEAR
    CMP DX,BX
    JG FIRST_BIGGER
    JB SECOND_BIGGER
    JE SEARCH_MORE
    
SEARCH_MORE:
    CMP AX,CX
    JG FIRST_BIGGER
    JB SECOND_BIGGER
    JE BOTH_EQUAL

BOTH_EQUAL:
    MOV AX,0
    MOV DX,0
    RET    
    
FIRST_BIGGER:
    SUB DX,BX
    CMP AX,CX
    JB SUB_OVERFLOW
    SUB AX,CX
    RET

SUB_OVERFLOW:
    DEC DX
    SUB AX,CX
    RET
    
SECOND_BIGGER:
    PUSH BX
    MOV BX,OFFSET MINUS_SIGN
    MOV [BX],1
    POP BX
    SUB BX,DX
    CMP CX,AX
    JL SUB_OVERFLOW_2
    SUB CX,AX
    MOV AX,CX
    MOV DX,BX
    RET

SUB_OVERFLOW_2:
    DEC BX
    SUB CX,AX
    MOV AX,CX
    MOV DX,BX
    RET

FIND_BIGGER ENDP

MINUS_SIGN_PRINT PROC NEAR
    PUSH BX
    MOV BX,OFFSET MINUS_SIGN
    CMP [BX],1
    JE PRINT_SIGN
    POP BX
    RET

PRINT_SIGN:
    PRINT_CHAR 2DH
    POP BX
    RET
MINUS_SIGN_PRINT ENDP