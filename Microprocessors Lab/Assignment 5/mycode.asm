;--------------- MACROS -------------------------;

INCLUDE MACROS.ASM                                

;--------------- DECLARATIONS -------------------;

STACK_SEG SEGMENT STACK
    DW 128 DUP(?)
STACK_SEG ENDS

DATA_SEG SEGMENT
    NEW_LINE DB 0AH,0DH,"$"  
    NUMBER_1 DB 5 DUP(0)
    NUMBER_2 DB 5 DUP(0)
    NUMBER_1_DIGITS DB 0
    NUMBER_2_DIGITS DB 0 
    SIGN DB 0
    TEMP DW 0
    DX_TEMP DW 0
    MINUS_SIGN DB 0 
    
DATA_SEG ENDS

CODE_SEG SEGMENT
    ASSUME CS:CODE_SEG,SS:STACK_SEG,DS:DATA_SEG,ES:DATA_SEG

MAIN PROC FAR
    ;SET SEGMENT REGISTERS
    MOV AX,DATA_SEG
    MOV DS,AX
    MOV ES,AX   
    
;--------------- CODE ---------------------------;
START:
    MOV CL, 0
    MOV CH, 0 ;IF 0 THEN ITS THE FIRST NUMBER
    MOV BX, OFFSET NUMBER_1
    CALL GET_NUMBER 
    MOV BX,OFFSET NUMBER_1_DIGITS
    MOV CH,00H
    MOV [BX],CL
    MOV CL,0
    MOV CH,1
    MOV BX,OFFSET NUMBER_2
    CALL GET_NUMBER      
    MOV BX,OFFSET NUMBER_2_DIGITS
    MOV CH,0
    MOV [BX],CL
    MOV BX,OFFSET NUMBER_1_DIGITS
    MOV CL,[BX] 
    SUB CL,1 
    MOV CH,CL              
    MOV AX,0
    MOV BX,OFFSET NUMBER_1 
    CALL MAKE_NUMBER
    PUSH DX
    PUSH AX
    MOV BX,OFFSET NUMBER_2_DIGITS
    MOV CL,[BX] 
    SUB CL,1
    MOV CH,CL
    MOV AX,0
    MOV DX,0
    MOV BX,OFFSET NUMBER_2
    CALL MAKE_NUMBER
    MOV CX,AX
    MOV BX,DX
    POP AX
    POP DX
    CALL ADD_OR_SUB
    CALL MINUS_SIGN_PRINT
    CALL MAKE_HEX
    PRINT_CHAR 3DH
    CALL MINUS_SIGN_PRINT
    CALL MAKE_DEC
    PRINT_STRING NEW_LINE
    JMP CLEAR_ALL
    
CLEAR_ALL:
    MOV CL,5
    MOV BX,OFFSET NUMBER_1_DIGITS
    MOV [BX],0
    MOV BX,OFFSET NUMBER_2_DIGITS
    MOV [BX],0
    MOV BX,OFFSET SIGN
    MOV [BX],0
    MOV BX,OFFSET TEMP
    MOV [BX],0
    MOV BX,OFFSET DX_TEMP
    MOV [BX],0
    MOV BX,OFFSET MINUS_SIGN
    MOV [BX],0
    MOV BX,OFFSET NUMBER_1
    
CLEAR_LOOP_1:
    MOV [BX],0
    INC BX
    LOOP CLEAR_LOOP_1

    MOV CL,5
    MOV BX, OFFSET NUMBER_2
 
CLEAR_LOOP_2:
    MOV [BX],0
    INC BX
    LOOP CLEAR_LOOP_2
    
    MOV DX,0
    MOV BX,0
    MOV CX,0
    MOV AX,0
    
JMP START
    
        
     
EXIT:
    EXIT_PROGRAM
MAIN ENDP 

;--------------  PROCEDURES ---------------------;
 

CODE_SEG ENDS 

INCLUDE 'MYLIB.INC'